{"pages":[],"posts":[{"title":"Kendo UI常见使用问题","text":"I. gridgrid传参读取数据 1234567891011121314151617@(Html.Kendo.Grid(Model) .DataSource(dataSource =&gt; dataSource .Ajax() .PageSize(20) .Read(reaad =&gt; read.Action(&quot;Method&quot;,&quot;ControllerName&quot;).Data(&quot;QueryParams&quot;)) // 下面这种方式适用于val为已知值, 不能动态设置其值 //.Read(reaad =&gt; read.Action(&quot;Method&quot;,&quot;ControllerName&quot;), new {param1: val1, param2: val2}) ))&lt;script type=&quot;text/javascript&quot;&gt; function QueryParams () { return { param1: &quot;val1&quot;, param2: &quot;val2&quot; } }&lt;/script&gt; grid添加行checkbox及序号123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263@(Html.Kendo().Grid(Model) .Name(&quot;GridName&quot;) .Columns(columns =&gt; { columns.Select().Width(30).HtmlAttributes(new { @class = &quot;select-checkbox&quot; }); columns.Template(@&lt;text&gt;&lt;/text&gt;).ClientTemplate(&quot;&lt;span class=&apos;row-number&apos;&gt;&lt;/span&gt;&quot;).Title(&quot;序号&quot;).Width(55); }) .ToolBar(toolbar =&gt; { toolbar.Custom.Text(&quot;删除&quot;).HtmlAttributes(new { @class = &quot;del_btn&quot; }).Url(&quot;javascript:void(0)&quot;); }) .Events(events =&gt; { events.DataBound(&quot;onDataGridBound&quot;); }))&lt;script type=&quot;text/javascript&quot;&gt; // grid 编号 function onDataGridBound() { var $grid = $(&quot;#GridName&quot;).data(&quot;kendoGrid&quot;); if ($grid) { var rows = $grid.items(); //连续编号 $(rows).each(function () { var index = $(this).index() + 1 + ($grid.dataSource.pageSize() * ($grid.dataSource.page() - 1)); var rowLabel = $(this).find(&quot;.row-number&quot;); $(rowLabel).text(index); }); } } // 删除 $(&quot;.del_btn&quot;).click(function () { var $grid = $(&quot;#GridName&quot;).data(&quot;kendoGrid&quot;); var idArr = []; $grid.select.each(function (index, row) { var item = $grid.dataItem(row); if (item) { idArr.push({Id: item.Id}); } }) if (idArr.length &gt; 0) { ComfirmAlert(&quot;是否删除所选数据！&quot;, function () { $.ajax({ url: &apos;@Url.Action(&quot;Method&quot;, &quot;ControllerName&quot;)&apos;, type: &apos;POST&apos;, contentType: &apos;application/json&apos;, data: JSON.stringify(idArr), error: function (err) { }, success: function (data) { MessageAlert(data.message); // 重新加载grid $grid.dataSource.read(); } }) }) } })&lt;/script&gt; grid自定义列模版12345678910111213141516171819202122// setTemplate(data) 用data可以获取整行数据columns.Bound(m =&gt; m.StateStr).Title(&quot;状态&quot;).Width(100).ClientTemplate(&quot;#= setTemplate(data) #&quot;);// svgCircle(Progress) 用具体列名则获取当前列名数据columns.Bound(p =&gt; p.Progress).ClientTemplate(&quot;#= svgCircle(Progress) #&quot;).Width(120);&lt;script type=&quot;text/javascript&quot;&gt; function setTemplate(item){ // item.StateStr item.xxx 这里可以进行计算 return &quot;&apos;&lt;span&gt;&apos;+item.StateStr+&apos;&lt;/span&gt;&quot;; } // gird添加圆环进度条(svg)fromat function svgCircle(val) { var setCircleVal = Math.floor(2 * Math.PI * 15) * (val/100); return &quot;&lt;div style=&apos;text-align: center;&apos;&gt;&quot; + &quot;&lt;div class=&apos;header_circle_text&apos;&gt;&quot; + &quot;&lt;span&gt;&quot; + val + &quot;%&lt;/span&gt;&quot; + &quot;&lt;/div&gt;&quot; + &quot;&lt;svg xmlns=&apos;http://www.w3.org/200/svg&apos; style=&apos;width:50px;height:50px;position:absolute;margin-left:-25px;margin-top:-35px;&apos;&gt;&quot; + &quot;&lt;circle cx=&apos;25&apos; cy=&apos;25&apos; r=&apos;15&apos; fill=&apos;none&apos; stroke=&apos;rgb(233,233,233)&apos; stroke-width=&apos;2&apos; stroke-linecap=&apos;round&apos; /&gt;&quot; + &quot;&lt;circle class=&apos;J_demo3&apos; cx=&apos;25&apos; cy=&apos;25&apos; r=&apos;15&apos; fill=&apos;none&apos; stroke=&apos;rgb(70,128,254)&apos; stroke-width=&apos;2&apos; stroke-dasharray=&apos;&quot; + setCircleVal +&quot;,10000&apos; /&gt;&quot; + &quot;&lt;/svg&gt;&quot; + &quot;&lt;/div&gt;&quot; } 修改grid中的popUp弹窗标题123456789101112131415161718@(Html.Kendo().Grid(Model) .Editable(editable =&gt; { editable.Mode(GridEditMode.PopUp); editable.TemplateName(&quot;_YourEditTemplateName&quot;).Window(m =&gt; { m.Width(980); }); }) .Events(events =&gt; { events.Edit(&quot;eventsOfEdit&quot;); }) )&lt;script type=&quot;text/javascript&quot;&gt; function eventsOfEdit (e) { if (e &amp;&amp; e.model &amp;&amp; e.model.isNew()) { $(&quot;.k-window-title&quot;).text(&quot;your new title, eg: add&quot;; } else { $(&quot;.k-window-title&quot;).text(&quot;your new title, eg: edit&quot;); } }&lt;/script&gt; gird添加toolbar需求: 用户可以搜索查询指定字段的数据.实现: toolbar元素可以通过append方式追加元素 (添加一个按钮，通过js在这个按钮append元素) 或者使用template(不过需要重写按钮的方法,比较麻烦) 123456789101112131415161718192021222324@(Html.Kendo.Grid(Model) .Name(&quot;GridName&quot;) .ToolBar(toolbar =&gt; { toolbar.Custom.Text(&quot;搜索&quot;).HtmlAttribute(new { @class = &quot;search_label&quot; }).Url(&quot;javascript:void(0)&quot;); }))&lt;script type=&quot;text/javascript&quot;&gt; $(document).ready(function () { $(&quot;.search_label&quot;).before(&quot;&lt;input placeholder=&apos;请输入内容&apos; id=&apos;search_keyword&apos; class=&apos;search_keyword&apos; /&gt;&quot;) }) $(&quot;.search_label&quot;).click(function () { var key_word = $(&quot;#search_keyword&quot;).val(); var $grid = $(&quot;#GridName&quot;).data(&quot;kendoGrid&quot;); if ($grid) { $grid.dataSource.filter({ field: &quot;Name&quot;, operator: &quot;contains&quot;, value: keyword }) } })&lt;/script&gt;","link":"/2019/06/17/KendoUI常见使用问题/"},{"title":"前端编码规范-ESLint","text":"coding…","link":"/2019/06/21/前端编码规范-ESLint/"},{"title":"hexo + github page 搭建","text":"安装环境前提：Node + Git I. hexo安装1. 使用npm安装hexo1npm install -g hexo-cli 2. hexo初始化123hexo init folderNamecd folderNamenpm install 3. 启动服务1hexo server 浏览器输入地址：localhost:4000查看. 4. github pagegit上新建仓库, 项目名为： yourusername.github.io, 记住仓库的地址后面需要部署到这个仓库里面来. 5. 配置git根目录/_config.yml 1234567{ deploy: type: git repository: https://github.com/ctrlands/ctrlands.github.io.git branch: master message: message} 了解更多：hexo deploy 6. 更换主题选择自己喜欢的主题下载，然后将主题文件放在 根目录/themes 文件下，默认主题(landspace)可删掉.然后在 根目录/_config.yml 123{ theme: hexo-theme-icarus} 查看更多主题：hexo theme 7. 生成静态页面1hexo generate 可简写为: 1hexo g 生成的文件位于 根目录/Public 文件夹里面. 8. 部署1hexo deploy 可简写为: 1hexo d 若遇到提示：ERROR: Deployer not fonud git.执行命令安装：npm install hexo-deployer-git --save安装成功后初次提交会输入用户名和密码, 若不想每次提交输入验证, 需添加ssh key, git添加ssh key 9. 域名解析在 根目录/themes/your theme/source 根目录中添加CNAME文件,无任何后缀名，文件内容为你的域名(eg: www.ctrlands.com). Ⅱ. 域名解析绑定在域名提供商控制台页面添加域名解析记录： 记录类型选CNAME 记录值填username.github.io. Ⅲ. 其他hexo中的 根目录/_config.yml 为站点配置文件.根目录/theme/downloadTheme 中的_config.yml为主题配置文件.设置语言为中文：修改 站点配置文件 中的 language: zh-Hans,若未生效，将主题配置文件language文件中的zh-CN.yml改为zh-Hans.yml.hexo deploy时添加自定义commit信息： 1hexo d -message \"the info of commit\" 可简写为： 1hexo d -m \"the info of commit\"","link":"/2019/06/13/hexo+githubPage搭建/"},{"title":"如何搭建一个简易Node.js服务器","text":"在这个前后端分离的时代, 前台页面数据的渲染往往依托于后台, 我们不能等后台代码编写完成才来编写前台页面, 因此我们可以自己搭建一个简易的后台服务, 或者使用postman来模拟获取后台数据. 今天我们选择使用Node.js + express 来搭建一个简易的后台服务. 既然选择使用Node, 那么Node环境肯定是需要安装的, 至于如何安装Node, 这里就不做多的介绍了. 安装express命令行界面, 全局安装express: 1npm install express-generator -g 初始化项目选择项目生成文件位置, eg: D:/Express, 在此目录下进入命令行 1express projectname 等待相应文件生成后, 12cd projectnamenpm install 运行项目相关npm依赖安装完成后, 命令行输入: 1npm start 浏览器输入: localhost:3000 查看, 默认端口号可在 projectname/bin/www 文件中查看. 修改默认模板引擎express默认页面模板引擎为jade, 我不习惯这种style, 所以我选择ejs, ejs模板引擎对html的结构改动较小.或者在创建express项目的时候就指定ejs为默认模板引擎.express -v ejs projectname首先安装ejs: 1npm install ejs -save 修改projectname/app.js 123// view engine setup// app.set('view engine', 'jade');app.set('view engine', 'ejs'); 跨域配置修改projectname/app.js 123456789// 允许跨域设置var allowCrossDomain = function (req, res, next) { res.header('Access-Control-Allow-Origin', '*'); res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE'); res.header('Access-Control-Allow-Headers', 'X-Requested-With,content-type'); res.header('Access-Control-Allow-Credentials', 'true'); next();};app.use(allowCrossDomain); 路由管理目前系统中的所有路由都写在了app.js里面, 随着路由的增多, app.js 也变得臃肿起来, 所以我们需要对路由进行集中管理.当我们使用Node.js + express搭建项目的时候, 前台有多个路由, 后台管理也有多个多个路由, 我们可以将其分开统一管理.首先, 我们修改 app.js 12345// 路由管理// 前台页面访问的路由 /xxxapp.use('/', require('./route/web/index.js'));// 后台管理访问的路由 /cms/xxxapp.use('/cms/', require('./route/cms/index.js')); 在route文件目录下新建”web”和”cms”两个文件夹, 分别在两个文件下新建文件”index.js” 1234567891011121314// /web/index.jsconst express = require('express');module.exports = function () { let router = express.Router(); router.get('/', (req, res) =&gt; { res.render('web/index.ejs', {}); }); router.use('/xxx', require('./xxx')()); // router.use('/route1', require('./route1')()); // router.use('/route2', require('./route2')()); // ...... more ...... return router;} 1234567891011121314// /cms/index.jsconst express = require('express');module.exports = function () { let router = express.Router(); router.get('/', (req, res) =&gt; { res.render('cms/index.ejs', {}); }); router.use('/xxx', require('./xxx')()); // router.use('/route1', require('./route1')()); // router.use('/route2', require('./route2')()); // ...... more ...... return router;}","link":"/2019/06/21/如何搭建一个简易Node-js服务器/"},{"title":"如何在IIS服务器上部署Asp.Net项目","text":"I. 项目发布使用工具及环境: Visual Studio 2017 + Windows Server 2008 项目解决方案右键选择”批生成“ 弹窗中”全选“后”重新生成“ 找到项目启动文件, 右键”发布“ 启动-&gt;在新弹窗中选择”IIS、FTP发布”-&gt;创建配置文件-&gt;发布方法选择”文件系统”-&gt;选择发布文件存放的位置 新界面点击”发布” I. 项目部署 Win+R, 输入mstsc远程登陆服务器, 以Windows Server 2008为例, 填写服务器地址, 用户名Administrator(默认), 密码. 服务器桌面, “我的电脑”右键”管理”-&gt;打开”服务器管理器”-&gt;”角色”-&gt;”添加角色”-&gt;下一步, 选择”Web服务器(IIS)”-&gt;下一步, 勾选”应用程序开发(Asp.Net, .NET扩展, ISAPI扩展, ISAPI筛选器), 常用HTTP功能(静态内容,默认文档,HTTP错误,HTTP重定向)”-&gt;下一步, “安装”-&gt;等待安装完成, 浏览器输入”127.0.0.1”查看是否安装成功. “开始”菜单-&gt;Internet信息服务(IIS)管理器-&gt;”网站”右键”添加网站”-&gt;填写”网站名称”, “物理路径”选择刚才发布文件的位置, 填写”端口”号(购买的服务器需要开放该端口) Ⅲ. 其他SQL Server运行需要.Netframework和VS2015环境, SQL Server TCP端口1433可能未设置. 打开SQL Server配置管理器, SQLEXPRESS的协议-&gt;TCP/IP右键-&gt;IPALL-&gt;TCP端口1433","link":"/2019/06/17/如何在IIS服务器上部署Asp.Net项目/"},{"title":"CSS规范-BEM","text":"CSS样式规范：BEM格式BEM: Block(块) Element(元素_) Modifier(修饰符)Block（块） 该块名称描述它的目的（“这是什么？”-menu or buttons等）,而不是它的形状或状态 该块不影响其环境，这意味着您不应该设置块的外部几何（边距）或定位 功能独立的页面组件, 可重复使用 Element（元素__） 该元素的名称描述它的目的（”这是什么？”-item or text等）,而不是它的形状或状态 元素全名的结构: blcok-name__element-name.使用双下划线__与块名称分割 元素始终是块的一部分, 而不是另一个元素, 所以元素不能定义层级结构, 不能出现block__elem1__elem2这种写法 Modifier (修饰符_) 该修饰符名称描述其外观或者状态或者行为 修饰符的结构: block-name__elementName_ModifierName or block-name_modifier-name 使用_连接 根据BEM方法，块结构应平整，不需要反映块的嵌套DOM结构 12345678910111213&lt;style&gt; .block {} .block__elem1 {} .block__elem2 {} .block__elem3 {}&lt;/style&gt;&lt;div class=\"block\"&gt; &lt;div class=\"block__elem1\"&gt; &lt;div class=\"block__elem2\"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=\"block__elem3\"&gt;&lt;/div&gt;&lt;/div&gt; 常见写法: 123456&lt;!-- block, block__item, block_modifier, block__item_modifier --&gt;&lt;ul class=\"menu menu_active\"&gt; &lt;li class=\"menu__item menu__item_active\"&gt;Menu Item1&lt;/li&gt; &lt;li class=\"menu__item\"&gt;Menu Item2&lt;/li&gt; &lt;li class=\"menu__item\"&gt;Menu Item3&lt;/li&gt;&lt;/ul&gt; 外部几何和定位，通过父块设置负责外部几何和定位的样式 12345678910111213&lt;style&gt; .button {} .header__button { margin: ; padding: ; position: ; .... }&lt;style&gt;&lt;header class=\"header\"&gt; &lt;button class=\"button header__button\"&gt;&lt;/button&gt;&lt;/header&gt; 了解更多：https://en.bem.info/methodology/quick-start/","link":"/2019/06/20/CSS规范-BEM/"},{"title":"Markdown Lint","text":"Markdown文档规范运行环境：Visual Studio Code + markdownlink插件以该markdownlink插件为标准, 例举自己编写md文档时出现的不规范行为.新建markdownlint自定义配置文件：.markdownlink.json MD001MD001-Heading levels should only increment by one level at a time(标题级别默认只能逐级增加) MD010MD010-Hard Tabs(默认tab与space不允许混用)修改.markdownlink.json, 添加 123{ \"MD010\": false} MD013MD013-Line length(默认不超过80)修改.markdownlink.json, 添加 123{ \"MD013\": false} MD022MD022-Headings should be surrounded by blank lines(标题前后应换行) 123## TitleSome Text... MD030MD030-Spaces after list markers(列表标记(例如’ -‘，’ *’，’ +’或’ 1.’)与列表项文本之间的空格数, 默认为1) MD031MD031-Fenced code blocks should be surrounded by blank lines(代码部分前后换行) MD033MD033-Inline HTML(默认: 标记时不允许使用原始HTML)修改.markdownlink.json, 添加 123{ \"MD033\": false} MD034MD034-Bare URL used(使用了纯URL, 应使用) eg: for more infomation, see http://ctrlands.com you should use: for more infomation, see &lt;http://ctrlands.com&gt; MD038MD038-Spaces inside code span elements(代码块范围不建议包含空格)eg: 1` some text... ` you should use: 1`some text...` MD047MD047-Files should end with a single newline character(文档结束处空一行)","link":"/2019/06/19/Markdown-Lint/"}],"tags":[{"name":"Kendo UI","slug":"Kendo-UI","link":"/tags/Kendo-UI/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"Node.js","slug":"Node-js","link":"/tags/Node-js/"},{"name":"Asp.Net","slug":"Asp-Net","link":"/tags/Asp-Net/"},{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"Markdown Lint","slug":"Markdown-Lint","link":"/tags/Markdown-Lint/"}],"categories":[{"name":"Kendo UI","slug":"Kendo-UI","link":"/categories/Kendo-UI/"},{"name":"Lint","slug":"Lint","link":"/categories/Lint/"},{"name":"hexo","slug":"hexo","link":"/categories/hexo/"},{"name":"Node.js","slug":"Node-js","link":"/categories/Node-js/"},{"name":"Asp.Net","slug":"Asp-Net","link":"/categories/Asp-Net/"}]}